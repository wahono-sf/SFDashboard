@using Newtonsoft.Json
@model IEnumerable<SFDashboard.Models.DashBoardDetails>
@{
    var resultBox = Model.Where(e => !e.Type.StartsWith("Table") && e.ArchiveFlag == "1" && !string.IsNullOrEmpty(e.GraphData)).ToList();
    var count = Model.Where(e => !e.Type.StartsWith("Table") && !string.IsNullOrEmpty(e.GraphData) && e.ArchiveFlag == "1").Count();
    int counter = 1;
    var res = Html.Raw(JsonConvert.SerializeObject(count));

    var jsongraph = Html.Raw(JsonConvert.SerializeObject(ViewBag.Graph)); ;
    //var mediumviewnongraph = Html.Raw(JsonConvert.SerializeObject(ViewBag.MediumViewNonGraph));
    //var largeviewnongraph = Html.Raw(JsonConvert.SerializeObject(ViewBag.LargeViewNonGraph));
    var mediumviewgraph = Html.Raw(ViewBag.MediumViewGraph);
    var largeviewgraph = Html.Raw(ViewBag.LargeViewGraph);
}

@foreach (var item in resultBox)
{
  
        @for (int i = 0; i < item.Value; i++)
        {
        <div class="animated flipInY col-lg-@(largeviewgraph) col-md-@(mediumviewgraph) col-sm-4">
            <div class="tile-stats">
                <div class="icon" style="color:@Html.DisplayFor(mdlitem => item.IconColor);"><i class="@Html.DisplayFor(mdlitem => item.Icon)" style="font-size:@Html.DisplayFor(mdlitem => item.IconSize);"></i></div>
                <div class="count"> @Html.DisplayFor(mdlitem => item.ListInformationBox[i].m_value)</div>
                <h3>@Html.DisplayFor(mdlitem => item.LabelName)</h3>
                    @if (item.GraphData != null && item.GraphData != "")
                    {
                        <div id="chart_plot_0@(counter)" class="demo-placeholder"></div>
                        counter++;
                    }
               @* <p>Lorem ipsum psdea itgum rixt.</p>*@
            </div>
        </div>
      
        }

     

  

}


<script>
    $(document).ready(function () {
        init_flot_chart();


        function gd(year, month, day) {
            return new Date(year, month - 1, day).getTime();
        }

        function init_flot_chart() {
            var graph = JSON.parse(@(jsongraph));
            var cek = @res;
            if (typeof (echarts) === 'undefined') { return; }
            console.log('init_echarts');
            console.log(cek);

            var theme = {
                color: [
                    '#ff426b', '#d1f5c1', '#478eff', '#3498DB',
                    '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
                ],

                title: {
                    itemGap: 8,
                    textStyle: {
                        fontWeight: 'normal',
                        color: '#408829'
                    }
                },

                dataRange: {
                    color: ['#1f610a', '#97b58d']
                },

                toolbox: {
                    color: ['#408829', '#408829', '#408829', '#408829']
                },

                tooltip: {
                    backgroundColor: 'rgba(0,0,0,0.5)',
                    axisPointer: {
                        type: 'line',
                        lineStyle: {
                            color: '#408829',
                            type: 'dashed'
                        },
                        crossStyle: {
                            color: '#408829'
                        },
                        shadowStyle: {
                            color: 'rgba(200,200,200,0.3)'
                        }
                    }
                },

                dataZoom: {
                    dataBackgroundColor: '#eee',
                    fillerColor: 'rgba(64,136,41,0.2)',
                    handleColor: '#408829'
                },
                grid: {
                    borderWidth: 0
                },

                categoryAxis: {
                    axisLine: {
                        lineStyle: {
                            color: '#408829'
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ['#eee']
                        }
                    }
                },

                valueAxis: {
                    axisLine: {
                        lineStyle: {
                            color: '#408829'
                        }
                    },
                    splitArea: {
                        show: true,
                        areaStyle: {
                            color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ['#eee']
                        }
                    }
                },
                timeline: {
                    lineStyle: {
                        color: '#408829'
                    },
                    controlStyle: {
                        normal: { color: '#408829' },
                        emphasis: { color: '#408829' }
                    }
                },

                k: {
                    itemStyle: {
                        normal: {
                            color: '#68a54a',
                            color0: '#a9cba2',
                            lineStyle: {
                                width: 1,
                                color: '#408829',
                                color0: '#86b379'
                            }
                        }
                    }
                },
                map: {
                    itemStyle: {
                        normal: {
                            areaStyle: {
                                color: '#ddd'
                            },
                            label: {
                                textStyle: {
                                    color: '#c12e34'
                                }
                            }
                        },
                        emphasis: {
                            areaStyle: {
                                color: '#99d2dd'
                            },
                            label: {
                                textStyle: {
                                    color: '#c12e34'
                                }
                            }
                        }
                    }
                },
                force: {
                    itemStyle: {
                        normal: {
                            linkStyle: {
                                strokeColor: '#408829'
                            }
                        }
                    }
                },
                chord: {
                    padding: 4,
                    itemStyle: {
                        normal: {
                            lineStyle: {
                                width: 1,
                                color: 'rgba(230, 128, 128, 0.5)'
                            },
                            chordStyle: {
                                lineStyle: {
                                    width: 1,
                                    color: 'rgba(128, 128, 128, 0.5)'
                                }
                            }
                        },
                        emphasis: {
                            lineStyle: {
                                width: 1,
                                color: 'rgba(128, 128, 128, 0.5)'
                            },
                            chordStyle: {
                                lineStyle: {
                                    width: 1,
                                    color: 'rgba(128, 128, 128, 0.5)'
                                }
                            }
                        }
                    }
                },
                gauge: {
                    startAngle: 225,
                    endAngle: -45,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                            width: 8
                        }
                    },
                    axisTick: {
                        splitNumber: 10,
                        length: 12,
                        lineStyle: {
                            color: 'auto'
                        }
                    },
                    axisLabel: {
                        textStyle: {
                            color: 'auto'
                        }
                    },
                    splitLine: {
                        length: 18,
                        lineStyle: {
                            color: 'auto'
                        }
                    },
                    pointer: {
                        length: '90%',
                        color: 'auto'
                    },
                    title: {
                        textStyle: {
                            color: '#333'
                        }
                    },
                    detail: {
                        textStyle: {
                            color: 'auto'
                        }
                    }
                },
                textStyle: {
                    fontFamily: 'Arial, Verdana, sans-serif'
                }
            };

            for (let i = 1; i <= parseInt(cek); i++) {
                if ($('#chart_plot_0' + i).length) {
                    const dataGraph = [];
                    var echartLine = echarts.init(document.getElementById('chart_plot_0' + i), theme);
                    graph[i - 1].m_graphlegend.forEach((object1, idx, array) => {
                        dataGraph.push({
                            name: object1,
                            type: 'line',
                            smooth: true,
                            itemStyle: {
                                normal: {
                                    areaStyle: {
                                        type: 'default'
                                    }
                                }
                            },
                            data: graph[i - 1].m_graphvalue[idx]
                        })
                    });
                    echartLine.setOption({
                        title: {
                            text: 'Line Graph',
                            subtext: 'Subtitle'
                        },
                        tooltip: {
                            trigger: 'axis'
                        },
                        legend: {
                            x: 220,
                            y: 40,
                            data: graph[i - 1].m_graphlegend
                        },
                        toolbox: {
                            show: true,
                            feature: {
                                magicType: {
                                    show: true,
                                    title: {
                                        line: 'Line',
                                        bar: 'Bar',
                                        stack: 'Stack',
                                        tiled: 'Tiled'
                                    },
                                    type: ['line', 'bar', 'stack', 'tiled']
                                },
                                restore: {
                                    show: true,
                                    title: "Restore"
                                },
                                saveAsImage: {
                                    show: true,
                                    title: "Save Image"
                                }
                            }
                        },
                        calculable: true,
                        xAxis: [{
                            type: 'category',
                            boundaryGap: false,
                            data: graph[i - 1].m_graphlabel
                        }],
                        yAxis: [{
                            type: 'value'
                        }],
                        series: dataGraph
                    });
                }



            }


        }


    });
</script>

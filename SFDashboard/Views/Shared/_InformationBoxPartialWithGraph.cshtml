@using Newtonsoft.Json
@model IEnumerable<SFDashboard.Models.TabDetail>
@{
    var resultBox = Model.Where(e => !e.dbdashboard.Type.StartsWith("Table") && e.dbdashboard.ArchiveFlag == "1" && !string.IsNullOrEmpty(e.dbdashboard.GraphData)).OrderBy(n => n.DashBoardName).ThenBy(n => n.code2).ThenBy(n => n.Code).ToList();
    var count = Model.Where(e => !e.dbdashboard.Type.StartsWith("Table") && !string.IsNullOrEmpty(e.dbdashboard.GraphData) && e.dbdashboard.ArchiveFlag == "1").Count();
    var firstcounter = Model.Where(e => !e.dbdashboard.Type.StartsWith("Table") && !string.IsNullOrEmpty(e.dbdashboard.GraphData) && e.dbdashboard.ArchiveFlag == "1").OrderBy(e => e.dbdashboard.dataCount).Select(j => j.dbdashboard.dataCount).FirstOrDefault();
    int counter = 1;
    var res = Html.Raw(JsonConvert.SerializeObject(count));
    var jsongraph = Html.Raw(JsonConvert.SerializeObject(ViewBag.Graph)); ;
    //var mediumviewnongraph = Html.Raw(JsonConvert.SerializeObject(ViewBag.MediumViewNonGraph));
    //var largeviewnongraph = Html.Raw(JsonConvert.SerializeObject(ViewBag.LargeViewNonGraph));
    var mediumviewgraph = Html.Raw(ViewBag.MediumViewGraph);
    var largeviewgraph = Html.Raw(ViewBag.LargeViewGraph);
    var tabcode = 0;
    foreach (var item in resultBox)
    {
        tabcode = item.TabCode;
    }
    string value = string.Empty;
}


@foreach (var item in resultBox)
{

    @* @for (int i = 0; i < item.dbdashboard.Value; i++)
    {*@
    <div class="animated flipInY col-lg-@(largeviewgraph) col-md-@(mediumviewgraph) col-sm-4">
        <div class="tile-stats">
            <div class="icon" style="color:@Html.DisplayFor(mdlitem => item.dbdashboard.IconColor);"><i class="@Html.DisplayFor(mdlitem => item.dbdashboard.Icon)" style="font-size:@Html.DisplayFor(mdlitem => item.dbdashboard.IconSize);"></i></div>
            <div class="count">
                @*@Html.DisplayFor(mdlitem => item.dbdashboard.ListInformationBox[0].m_value)*@
                @{

                    if (item.dbdashboard.ListInformationBox[0].m_value.Contains('.'))
                    { value = String.Format("{0:#,##0.0000}", decimal.Parse(item.dbdashboard.ListInformationBox[0].m_value)); }
                    else { value = String.Format("{0:#,##0}", decimal.Parse(item.dbdashboard.ListInformationBox[0].m_value)); }
                }
                @value
            </div>
            <h3>@Html.DisplayFor(mdlitem => item.dbdashboard.LabelName)</h3>
            @if (item.dbdashboard.GraphData != null && item.dbdashboard.GraphData != "")
            {
                <div id="chart_plot_@(item.TabCode)0@(counter)" class="demo-placeholder"></div>
                counter++;
            }

        </div>
    </div>

    @* }*@
}


<script>
    $(document).ready(function () {
        init_flot_chart();



        function gd(year, month, day) {
            return new Date(year, month - 1, day).getTime();
        }

        function init_flot_chart() {
            var graph = JSON.parse(@(jsongraph));
            var cek = @res;

            if (typeof (echarts) === 'undefined') { return; }
            console.log('init_echarts');

            var theme = {
                color: [
                    '#ff426b', '#d1f5c1', '#478eff', '#3498DB',
                    '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
                ],

                title: {
                    itemGap: 8,
                    textStyle: {
                        fontWeight: 'normal',
                        color: '#408829'
                    }
                },

                dataRange: {
                    color: ['#1f610a', '#97b58d']
                },

                toolbox: {
                    color: ['#408829', '#408829', '#408829', '#408829']
                },

                tooltip: {
                    backgroundColor: 'rgba(0,0,0,0.5)',
                    axisPointer: {
                        type: 'line',
                        lineStyle: {
                            color: '#408829',
                            type: 'dashed'
                        },
                        crossStyle: {
                            color: '#408829'
                        },
                        shadowStyle: {
                            color: 'rgba(200,200,200,0.3)'
                        }
                    }
                },

                dataZoom: {
                    dataBackgroundColor: '#eee',
                    fillerColor: 'rgba(64,136,41,0.2)',
                    handleColor: '#408829'
                },
                grid: {
                    borderWidth: 0
                },

                categoryAxis: {
                    axisLine: {
                        lineStyle: {
                            color: '#408829'
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ['#eee']
                        }
                    }
                },

                valueAxis: {
                    axisLine: {
                        lineStyle: {
                            color: '#408829'
                        }
                    },
                    splitArea: {
                        show: true,
                        areaStyle: {
                            color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ['#eee']
                        }
                    }
                },
                timeline: {
                    lineStyle: {
                        color: '#408829'
                    },
                    controlStyle: {
                        normal: { color: '#408829' },
                        emphasis: { color: '#408829' }
                    }
                },

                k: {
                    itemStyle: {
                        normal: {
                            color: '#68a54a',
                            color0: '#a9cba2',
                            lineStyle: {
                                width: 1,
                                color: '#408829',
                                color0: '#86b379'
                            }
                        }
                    }
                },
                map: {
                    itemStyle: {
                        normal: {
                            areaStyle: {
                                color: '#ddd'
                            },
                            label: {
                                textStyle: {
                                    color: '#c12e34'
                                }
                            }
                        },
                        emphasis: {
                            areaStyle: {
                                color: '#99d2dd'
                            },
                            label: {
                                textStyle: {
                                    color: '#c12e34'
                                }
                            }
                        }
                    }
                },
                force: {
                    itemStyle: {
                        normal: {
                            linkStyle: {
                                strokeColor: '#408829'
                            }
                        }
                    }
                },
                chord: {
                    padding: 4,
                    itemStyle: {
                        normal: {
                            lineStyle: {
                                width: 1,
                                color: 'rgba(230, 128, 128, 0.5)'
                            },
                            chordStyle: {
                                lineStyle: {
                                    width: 1,
                                    color: 'rgba(128, 128, 128, 0.5)'
                                }
                            }
                        },
                        emphasis: {
                            lineStyle: {
                                width: 1,
                                color: 'rgba(128, 128, 128, 0.5)'
                            },
                            chordStyle: {
                                lineStyle: {
                                    width: 1,
                                    color: 'rgba(128, 128, 128, 0.5)'
                                }
                            }
                        }
                    }
                },
                gauge: {
                    startAngle: 225,
                    endAngle: -45,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                            width: 8
                        }
                    },
                    axisTick: {
                        splitNumber: 10,
                        length: 12,
                        lineStyle: {
                            color: 'auto'
                        }
                    },
                    axisLabel: {
                        textStyle: {
                            color: 'auto'
                        }
                    },
                    splitLine: {
                        length: 18,
                        lineStyle: {
                            color: 'auto'
                        }
                    },
                    pointer: {
                        length: '90%',
                        color: 'auto'
                    },
                    title: {
                        textStyle: {
                            color: '#333'
                        }
                    },
                    detail: {
                        textStyle: {
                            color: 'auto'
                        }
                    }
                },
                textStyle: {
                    fontFamily: 'Arial, Verdana, sans-serif'
                }
            };

            let j = @firstcounter;
            for (let i = 1; i <= parseInt(cek); i++) {
                if ($('#chart_plot_@(tabcode)0' + i).length) {
                    const dataGraph = [];
                    const chartDom = document.getElementById('chart_plot_@(tabcode)0' + i);
                    const echartLine = echarts.init(chartDom, theme);

                    graph[j - 1].m_graphlegend.forEach((legend, idx) => {
                        dataGraph.push({
                            name: legend,
                            type: 'line',
                            smooth: true,
                            itemStyle: { normal: { areaStyle: { type: 'default' } } },
                            data: graph[j - 1].m_graphvalue[idx]
                        });
                    });

                    const baseOption = {
                        title: { text: 'Line Graph', subtext: 'Subtitle' },
                        tooltip: { trigger: 'axis' },
                        legend: { x: 220, y: 40, data: graph[j - 1].m_graphlegend },
                        calculable: true,
                        xAxis: [{ type: 'category', boundaryGap: false, data: graph[j - 1].m_graphlabel }],
                        yAxis: [{ type: 'value' }],
                        series: dataGraph
                    };

                    function cloneBase() { return JSON.parse(JSON.stringify(baseOption)); }

                    function setLine() {
                        const opt = cloneBase();
                        opt.series.forEach(s => {
                            s.type = 'line';
                            s.smooth = true;
                            s.itemStyle = { normal: { areaStyle: { type: 'default' } } };
                            delete s.stack;
                        });
                        opt.toolbox = toolbox; 
                        echartLine.clear();
                        echartLine.setOption(opt, true);
                    }

                    function setBar(stacked = false) {
                        const opt = cloneBase();

                        if (opt.xAxis && opt.xAxis.length > 0) {
                            opt.xAxis[0].boundaryGap = true;
                        }

                        opt.series.forEach(s => {
                            s.type = 'bar';
                            delete s.smooth;
                            delete s.itemStyle;
                            if (stacked) {
                                s.stack = 'total';
                            } else {
                                delete s.stack;
                            }
                        });

                        opt.toolbox = toolbox;
                        echartLine.clear();
                        echartLine.setOption(opt, true);
                    }


                    function setPie() {
                        echartLine.clear();
                        echartLine.setOption({
                            title: { text: 'Pie Chart', subtext: 'Categories', left: 'left' },
                            tooltip: { trigger: 'item' },
                            legend: { orient: 'vertical', left: 'left' },
                            xAxis: [], yAxis: [], 
                            series: [{
                                name: 'Categories',
                                type: 'pie',
                                radius: '55%',
                                center: ['50%', '60%'],
                                data: [
                                    { value: 335, name: 'Category A' },
                                    { value: 310, name: 'Category B' },
                                    { value: 234, name: 'Category C' },
                                    { value: 135, name: 'Category D' }
                                ]
                            }],
                            toolbox: toolbox 
                        }, true);
                    }

                    const toolbox = {
                        show: true,
                        feature: {
                            myLine: {
                                show: true,
                                title: 'Line',
                                icon: 'path://M0,30 L10,20 L20,25 L30,10 L40,15 L50,5 L60,10',
                                onclick: setLine
                            },
                            myBar: {
                                show: true,
                                title: 'Bar',
                                icon: 'path://M5,30 H15 V10 H5 Z M25,30 H35 V5 H25 Z M45,30 H55 V20 H45 Z',
                                onclick: function () { setBar(false); }
                            },
                            myStack: {
                                show: true,
                                title: 'Stack',
                                icon: 'path://M5,30 H55 V25 H5 Z M5,22 H55 V17 H5 Z M5,14 H55 V9 H5 Z',
                            },
                            myTiled: {
                                show: true,
                                title: 'Tiled',
                                icon: 'path://M5,30 H15 V20 H5 Z M20,30 H30 V20 H20 Z M35,30 H45 V20 H35 Z M50,30 H60 V20 H50 Z',
                            },
                            myPie: {
                                show: true,
                                title: 'Pie',
                                icon: 'path://M12 2 A10 10 0 1 0 22 12 L12 12 Z',
                                iconStyle: { color: 'saddlebrown', borderColor: 'saddlebrown' },
                                onclick: setPie
                            },
                            restore: {
                                show: true,
                                title: 'Restore',
                                onclick: setLine
                            },
                            saveAsImage: { show: true, title: 'Save Image' }
                        }
                    };

                    const initOpt = cloneBase();
                    initOpt.toolbox = toolbox;
                    echartLine.setOption(initOpt, true);
                }

                j++;
            }

        }


    });
</script>
